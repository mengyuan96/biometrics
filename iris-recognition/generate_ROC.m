% Generates ROC curves.
% Attributes:
%   <gallery_map>: a gallery map generated by grouping gallery entries
%   using subject ids.
%   <probe_map>: a probe map generated by grouping probes using subject
%   ids.
% Return:
%   <[fprs, tprs]>: false positive rates and corresponding true positive
%   rates.
% Author: Shiyu Luo

function [fprs, tprs] = generate_ROC(gallery_map, probe_map)
T = 1000;
thresholds = linspace(0, 1, T);
fprs = zeros(T, 1);
tprs = zeros(T, 1);

% number of subjects in gallery map
M = length(gallery_map);
% number of subjects in probe map
N = length(probe_map);

% keys in gallery map
keys_gallery_map = keys(gallery_map);
% keys in probe map
keys_probe_map = keys(probe_map);

count_nan = 0;
% array holding average left eye scores
left_scores = zeros(M * N, 1);
% array holding average right eye scores
right_scores = zeros(M * N, 1);
% array holding ground truth
% 1 for true claim, 0 for false claim
gts = zeros(M * N, 1);
counter = 1;
for ii = 1:N
    probe_id = keys_probe_map{ii};
    probe_subject = probe_map(probe_id);
    for jj = 1:M
        % probe subject jj and gallery subject ii
        gallery_id = keys_gallery_map{jj};
        gallery_subject = gallery_map(gallery_id);
        % average left eye score of jj and ii
        left_score = difference_score(probe_subject('Left'), gallery_subject('Left'));
        % average right eye score of jj and ii
        right_score = difference_score(probe_subject('Right'), gallery_subject('Right'));
        % if get nan as a score, do not count it
        if ~isnan(left_score) && ~isnan(right_score)
            left_scores(counter) = left_score;
            right_scores(counter) = right_score;
            % ground truth of jj and ii
            gt = 0;
            if strcmp(probe_id, gallery_id)
                gt = 1;
            end
            gts(counter) = gt;
            counter = counter + 1;
        else
            count_nan = count_nan + 1;
        end
    end
end

% drop invalid bits
valid_bits = M * N - count_nan;
left_scores = left_scores(1:valid_bits);
right_scores = right_scores(1:valid_bits);
gts = gts(1:valid_bits);

% number of true claim
num_tc = sum(gts == 1);
% number of false claim
num_fc = sum(gts == 0);

disp('finish computing scores')

% iterate over thresholds
for kk = 1:T
    threshold = thresholds(kk);
    num_tp = 0;
    num_fp = 0;
    % iterate over all gallery-probe pairs
    for ii = 1:length(left_scores)
        % left eye score
        left_score = left_scores(ii);
        % right eye score
        right_score = right_scores(ii);
        % ground truth
        gt = gts(ii);
        % decision
        decision = left_score <= threshold && right_score <= threshold;
        if gt && decision
            num_tp = num_tp + 1;
        end
        if ~gt && decision
            num_fp = num_fp + 1;
        end
    end
    fprs(kk) = num_fp / num_fc;
    tprs(kk) = num_tp / num_tc;
    fprintf('finish fpr and tpr for threshold %.2f', threshold);
end

end


            
            
        
         
            

